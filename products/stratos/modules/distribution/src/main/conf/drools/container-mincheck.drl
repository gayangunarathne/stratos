/*
 * Licensed to the Apache Software Foundation (ASF) under one 
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied.  See the License for the 
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.stratos.autoscaler.rule;

import org.apache.commons.logging.Log;
import org.apache.stratos.autoscaler.context.cluster.KubernetesClusterContext;

global org.apache.stratos.autoscaler.rule.RuleLog log;
global org.apache.stratos.autoscaler.rule.RuleTasksDelegator delegator;
global java.lang.String clusterId;
 
rule "Container Minimum Rule"
dialect "mvel"
	when
           kubernetesClusterContext : KubernetesClusterContext ()
	   kubernetesClusterId : String() from kubernetesClusterContext.getKubernetesClusterID()
           minReplicas : Integer() from kubernetesClusterContext.getMinReplicas()
           nonTerminatedReplicas : Integer() from kubernetesClusterContext.getNonTerminatedMemberCount()
           isServiceClusterCreated : Boolean() from kubernetesClusterContext.isServiceClusterCreated()
	   
           eval(log.info("Running minimum rule: [kub-cluster] " + kubernetesClusterId + " [cluster] " + clusterId))
           eval(log.info("[min-check] " + " [cluster] : " + clusterId + " [Replicas] nonTerminated : " + nonTerminatedReplicas))
	   eval(log.info("[min-check] " + " [cluster] : " + clusterId + " [Replicas] minReplicas : " + minReplicas))
	   eval(nonTerminatedReplicas < minReplicas)
       then
           if (isServiceClusterCreated) {
             // we suceeded calling startContainer() once, can't call it again
              log.info("[min-check] Decided to scale-up : [cluster] : " + clusterId);
 	      log.info("[min-check] " + " [cluster] : " + clusterId + " ; min-rule not satisfied, scaling up to minReplicas : " + minReplicas);
              delegator.delegateScaleUpContainers(kubernetesClusterContext, minReplicas);
	   } else {
             // we should call startContainer
              log.info("[min-check] Decided to create the cluster : [cluster] : " + clusterId);
 	      log.info("[min-check] " + " [cluster] : " + clusterId + " ; min-rule not satisfied, no containers created yet, creating minReplicas : " + minReplicas);
              delegator.delegateStartContainers(kubernetesClusterContext);
           }
end
